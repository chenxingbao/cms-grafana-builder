apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "kk-grafana-cms.fullname" . }}
  labels:
{{ include "kk-grafana-cms.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "kk-grafana-cms.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "kk-grafana-cms.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ template "kk-grafana-cms.fullname" . }}-sa
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: GF_INSTALL_PLUGINS
            value: {{ .Values.plugins | quote }}
          - name: GF_SECURITY_ADMIN_PASSWORD__FILE
            value: "/var/local/secrets/admin_password"
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: {{ .Values.anonymous | quote }}
          - name: GF_AUTH_BASIC_ENABLED
            value: "true"
          ports:
            - name: web
              containerPort: 3000
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /api/health
              port: web
          volumeMounts:
          - mountPath: /var/lib/grafana
            name: grafana-storage
          - mountPath: /etc/grafana/provisioning/dashboards/all.yaml
            name: grafana-provisionings
            subPath: dashboards.yaml
          - name: pass
            mountPath: /var/local
            readOnly: true
          - name: datasource
            mountPath: /etc/grafana/provisioning/datasources/all.yaml
            subPath: all.yaml
          - name: cms-model
            mountPath: /var/lib/grafana/cms-dashboards/
          resources:
{{ toYaml .Values.resources | indent 12 }}
        - args:
          - nginx
          - -g
          - daemon off;
          - -c
          - /nginx/nginx.conf
          image: nginx:1.15.8-alpine
          imagePullPolicy: IfNotPresent
          name: grafana-proxy
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 50m
              memory: 50Mi
          securityContext:
            runAsGroup: 101
            runAsUser: 100
          volumeMounts:
          - mountPath: /nginx/
            name: grafana-nginx
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
      - emptyDir: {}
        name: grafana-storage
      - name: datasource
        secret:
          secretName: {{ template "cms-secret.fullname" . }}
          items:
          - key: datasources.yaml
            path: all.yaml
            mode: 511
      - name: pass
        secret:
          secretName: {{ template "cms-secret.fullname" . }}
          items:
          - key: adminPass
            path: secrets/admin_password
      - configMap:
          defaultMode: 420
          items:
          - key: nginx.conf
            mode: 438
            path: nginx.conf
          name: grafana-cms-nginx
        name: grafana-nginx
      - configMap:
          defaultMode: 420
          name: grafana-cms-provisionings
        name: grafana-provisionings
      - configMap:
          defaultMode: 420
          name: cms-model
        name: cms-model
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "cms-variable.fullname" . }}
  labels:
{{ include "cms-variable.labels" . | indent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "cms-variable.fullname" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "cms-variable.fullname" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ template "cms-variable.fullname" . }}
          env:
            - name: ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ template "cms-secret.fullname" . }}
                  key: accessKeyId
            - name: ACCESS_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "cms-secret.fullname" . }}
                  key: accessSecret
            - name: REGION_ID
              value: {{ .Values.region_id }}
          command: ["/bin/sh", "-c", "cms run"]
          image: "{{ .Values.backend_image.repository }}:{{ .Values.backend_image.tag }}"
          imagePullPolicy: {{ .Values.backend_image.pullPolicy }}
          ports:
            - name: web
              containerPort: 8088
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: web
          resources:
{{ toYaml .Values.backend_resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}